import java.io.*;
import java.util.Scanner;
import java.util.Arrays;

public class Anagram {
	/*
	 * User defined list to contain scanned words from a text file
	 */
	CustomList wordList;
	/*
	 * User defined list to contain anagram matrix
	 */
	CustomList[] wordMat;
	/*
	 * File name of the input text file
	 */
	String fileIN;
	/*
	 * File name of the output text file
	 */
	String fileOUT;
	/*
	 * Time measurement fields
	 */
	double start, stop;
	PrintWriter cursor;
	/*
	 * Input size
	 */
	int inSize;
	/*
	 * Constructs an object of type anagram
	 */
	public Anagram() {
		wordList = new CustomList();
	}
	/*
	 * Read input text file and store into custom list
	 */
	public void fillWordList() throws IOException{
		Scanner scan = new Scanner(new File(fileIN));
		String data;
		// scans the input file by checking if the next characters is an EOL
		// if it is not, the String is appended to the list; else the loop exits
		while(scan.hasNext()) {
			data = scan.next();
			wordList.addEnd(data);
		}
		scan.close();
	}
	/*
	 * Fills the matrix of anagrams
	 */
	/*
	public void anagramMat() {
		// outer loop creates a new element for each word that are not anagram of the other
		for(int i = 0; i < wordList.size(); i++) {
			wordMat[i] = new CustomList();
			wordMat[i].addEnd(wordList.getData(i));
			// inner loop checks if there are anagrams of the current selected word within the input file
			for(int j = i+1; j< wordList.size(); j++) {
				// if an anagram is found, it is added to the end of the list of that specific array element
				if(isAnagram(wordList.getData(i),wordList.getData(j))) {
					wordMat[i].addEnd(wordList.getData(j));
					wordList.delete(j);
					j--;
				}
			}
		}
	}
	*/

	 public void anagramMat() {
		// outer loop creates a new element for each word that are not anagram of the other
		for(int arrayIndex = 0, inputIndex = 0; arrayIndex < wordList.size(); arrayIndex++) {
			wordMat[arrayIndex] = new CustomList();
			wordMat[arrayIndex].addEnd(wordList.getData(inputIndex));
			// inner loop checks if there are anagrams of the current selected word within the input file
			for(int counter = 0; counter<arrayIndex; counter++) {
				// if an anagram is found, it is added to the end of the list of that specific array element
				if(isAnagram(wordList.getData(inputIndex),wordMat[counter].getData(1))) {
					wordMat[counter].addEnd(wordList.getData(inputIndex));
					wordMat[arrayIndex].delete(0);
					arrayIndex--;
				}
			}
			inputIndex++;
		}
	 }
	/*
	 * Check if two words are anagrams of each other by sorting both in ascending order
	 * then checking if the resulting arrays are equal
	 * @param fW first word
	 * @param sW second word
	 */
	public boolean isAnagram(String fW, String sW) {
		char[] firstWord = charSort(fW.toCharArray());
		char[] secondWord = charSort(sW.toCharArray());
		return Arrays.equals(firstWord, secondWord);	
	}
	/*
	 * This is a modified implementation of insertion sort enabled
	 * to sort chars instead of integers
	 * @param charArray array to be sorted
	 */
	public char[] charSort(char[] charArray) {
		// outer loop starts at the second item of the array
		for(int i = 1,j; i < charArray.length; i++) {
			char temp = charArray[i];
			// inner loop only runs when the element to the left is more than the current element
			// if it is more they are switched
			for(j = i; (j>0)&&(temp<charArray[j-1]); j--)
				charArray[j] = charArray[j-1];
			charArray[j] = temp;
		}
		return charArray;
	}
	/*
	 * Prints the output to a file
	 */
	public void printToFile() {
		try {
			cursor = new PrintWriter(fileOUT);
			cursor.print("This is the sorted list of anagrams.\n");
			// goes through all the pointers
			for(int i = 0; wordMat[i] != null; i++) {
				// goes through all the contents within pointer[i]
				for(int j = 0; j < wordMat[i].size(); j++) {
					// prints to file
					cursor.print(wordMat[i].getData(j) + " ");
				}
				cursor.println();
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			System.out.println("File does not exist.");
		}
	}
	
	public static void main(String[] args) throws IOException {
		Anagram sample = new Anagram();
		System.out.println("The program has started.");
		sample.start = System.nanoTime();
		// input file name
		sample.fileIN = args[0];
		// output file name
		sample.fileOUT = args[1];
		// fills the list using the input file
		sample.fillWordList();
		sample.inSize = sample.wordList.size();
		// sort the input file in alphabetical order
		sample.wordList.sort();
		// create an array of pointer to object type CustomList
		sample.wordMat = new CustomList[sample.wordList.size()];
		// fill in the "matrix" of anagrams
		sample.anagramMat();
		// print the output to file
		sample.printToFile();
		sample.stop = System.nanoTime();
		
		sample.cursor.print("Sorting the input file that contains "+sample.inSize+" words took "+(sample.stop-sample.start)/1000000000.0+" seconds.\n");
		sample.cursor.println("The program has ended.");
		sample.cursor.close();
		
		System.out.print("Sorting the input file that contains "+sample.inSize+" words took "+(sample.stop-sample.start)/1000000000.0+" seconds.\n");
		System.out.println("The program has ended.");
	}
}
